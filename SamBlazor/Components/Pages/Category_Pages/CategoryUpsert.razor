@page "/category/create"
@page "/category/update/{Id:int}"
@inject ICategoryRepository _categoryrepository;
@inject NavigationManager navigate;
@inject IJSRuntime _JS;
@if (IsProcessing)
{
	<div class="position-absolute w-10 h-10 d-flex flex-column align-items-center bg-white justify-content-center">
		<img src="/images/load.gif" />
	</div>
}
else
{
	<div class="card shadow border-0 mt-4">
		<div class="card-header bg-black bg-gradient my-lg-0 py-3">
			<div class="row">
				<div class="col-12 text-center">
					<h2 class="text-white py-2">@(Id>0?"Update":"Create") Category</h2>
				</div>
			</div>
		</div>
		<div class="card-body p-4">
		
				<EditForm Model="@Category" OnValidSubmit="UpsertCategory">
					<DataAnnotationsValidator />
					
					<div class="border p-3 mt-4">
						<div class="form-floating py-3 col-12">
						
						<InputText id="Name" @bind-Value="@Category.Name" class="form-control" />
						<label for="Name">Name</label>
						<ValidationMessage For="@(() => Category.Name)" />
						</div>
					
					</div>
					<div class="row mt-3">
			
					 <div class="col-6 col-md-3">
						 <button type="submit" class="btn  btn-primary form-control" style="width:250px">
						<i class="bi bi-arrow-bar-left"></i>
							@(Id > 0 ? "Update" : "Create")
							</button>
					 </div>
				 <div class="col-6 col-md-3">
					<button type="submit" class="btn  btn-secondary form-control" style="width:250px">
						<i class="bi bi-arrow-bar-left"></i>
						Back To  List
					</button>
				</div>
				</div>
				</EditForm>
			
		</div>

	</div>
}


@code {
	[Parameter]
	public int Id { get; set; }

	private bool IsProcessing { get; set; } = true;

	[SupplyParameterFromForm]
	private Category Category { get; set; } = new Category();

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadCategory();
			IsProcessing = false;
			StateHasChanged();
		}
	}
	private async Task LoadCategory()
	{
		if (Id > 0)
		{
			Category = await _categoryrepository.GetCategoryByIdAsync(Id);
		}
	}

	private async Task UpsertCategory()
	{
		IsProcessing = true;
		if (Category.Id > 0)
		{
			await _categoryrepository.UpdateAsync(Category);
			await _JS.ToasterSuccess("Category Updated Successfully");
		}
		else
		{
			await _categoryrepository.CreateAsync(Category);
			//await js.ToasterError("Category Updated Failed");
		}
		IsProcessing = false;
		navigate.NavigateTo("/category");
	}
}
